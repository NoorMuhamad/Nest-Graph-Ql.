# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  firstName: String!
  lastName: String!
  cnic: String!
  password: String!
  email: String!
  phoneNumber: String
  role: UserRole!
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserRole {
  OWNER
  ADMIN
  STAFF
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserResult {
  data: [User!]!
  totalPages: Float!
  currentPage: Float!
}

type BaseResponse {
  success: Boolean!
  message: String!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Transaction {
  id: ID!
  amount: String!
  paymentMethod: String!
  createdAt: DateTime
  updatedAt: DateTime
  bill: Bill!
}

type TransactionResponse {
  totalPages: Int!
  currentPage: Int!
  data: [Transaction!]!
}

type Bill {
  id: ID!
  billingDate: DateTime!
  totalAmount: String!
  status: BillStatus!
  createdAt: DateTime
  updatedAt: DateTime
  customer: Customer!
  billTransaction: Transaction!
}

enum BillStatus {
  PAID
  UNPAID
}

type BillResponse {
  totalPages: Int!
  currentPage: Int!
  data: [Bill!]!
}

type Complaint {
  id: ID!
  subject: String!
  description: String!
  status: ComplaintStatus!
  createdAt: DateTime
  updatedAt: DateTime
  customer: Customer!
}

enum ComplaintStatus {
  PENDING
  INPROGRESS
  COMPLETE
}

type ComplaintResponse {
  totalPages: Int!
  currentPage: Int!
  data: [Complaint!]!
}

type Package {
  id: ID!
  name: String!
  monthlyFee: Float!
  speed: String!
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customers: [Customer!]!
}

type PackageResponse {
  totalPages: Int!
  currentPage: Int!
  data: [Package!]!
}

type Customer {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  cnic: String!
  phoneNumber: String
  address: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  packages: [Package!]!
  complaints: [Complaint!]!
  Bills: [Bill!]!
}

type CustomerResponse {
  totalPages: Int!
  currentPage: Int!
  data: [Customer!]!
}

type Query {
  users(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): UserResult!
  user(username: String!): User!
  bills(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): BillResponse!
  bill(billingDate: DateTime!): Bill!
  deleteBill(id: String!): BaseResponse!
  customers(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): CustomerResponse!
  customer(firstName: String!): Customer!
  deleteCustomer(id: String!): BaseResponse!
  complaints(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): ComplaintResponse!
  complaint(subject: String!): Complaint!
  deleteComplaint(id: String!): BaseResponse!
  transactions(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): TransactionResponse!
  Transaction(paymentMethod: String!): Transaction!
  deleteTransaction(id: String!): BaseResponse!
  packages(page: Int! = 10, limit: Int! = 0, sortBy: String, sortOrder: String! = "ASC", search: String): PackageResponse!
  package(name: String!): Package!
  deletePackage(id: String!): BaseResponse!
}

type Mutation {
  createUser(createUserType: CreateUserType!): User!
  updateUser(updateUserType: UpdateUserType!): User!
  deleteUser(id: String!): BaseResponse!
  createBill(createBillType: CreateBillType!): Bill!
  updateBill(updateTransactionType: UpdateTransactionType!): Transaction!
  createCustomer(createCustomerType: CreateCustomerType!): Customer!
  updateCustomer(updateCustomerType: UpdateCustomerType!): Customer!
  createComplaint(createComplaintType: CreateComplaintType!): Complaint!
  updateComplaint(updateComplaintType: UpdateComplaintType!): Complaint!
  createTransaction(createTransactionType: CreateTransactionType!): Transaction!
  createPackage(createPackageType: CreatePackageType!): Package!
  updatePackage(updatePackageType: UpdatePackageType!): Package!
  login(loginInput: LoginInput!): LoginResponse!
}

input CreateUserType {
  firstName: String!
  lastName: String!
  cnic: String!
  password: String!
  email: String!
  phoneNumber: String!
  role: UserRole!
  address: String!
}

input UpdateUserType {
  firstName: String
  lastName: String
  cnic: String
  password: String
  email: String
  phoneNumber: String
  role: UserRole
  address: String
  id: ID!
}

input CreateBillType {
  billingDate: DateTime!
  totalAmount: String!
  status: BillStatus!
}

input UpdateTransactionType {
  amount: String
  paymentMethod: String
  id: ID!
}

input CreateCustomerType {
  firstName: String!
  lastName: String!
  email: String!
  address: String!
  phoneNumber: String!
}

input UpdateCustomerType {
  firstName: String
  lastName: String
  email: String
  address: String
  phoneNumber: String
  id: ID!
}

input CreateComplaintType {
  subject: String!
  description: String!
  status: ComplaintStatus!
}

input UpdateComplaintType {
  subject: String
  description: String
  status: ComplaintStatus
  id: ID!
}

input CreateTransactionType {
  amount: String!
  paymentMethod: String!
}

input CreatePackageType {
  name: String!
  monthlyFee: Float!
  speed: String!
  isActive: Boolean!
}

input UpdatePackageType {
  name: String
  monthlyFee: Float
  speed: String
  isActive: Boolean
  id: ID!
}

input LoginInput {
  email: String!
  password: String!
}